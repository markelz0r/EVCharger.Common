// <auto-generated />
using EVCharger.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EVCharger.DB.Migrations
{
    [DbContext(typeof(ChargerContext))]
    [Migration("20210602214758_AddConstellations")]
    partial class AddConstellations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "6.0.0-preview.4.21253.1")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ConstellationUser", b =>
                {
                    b.Property<string>("ConstellationsId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("ConstellationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ConstellationUser");
                });

            modelBuilder.Entity("EVCharger.Base.Models.Models.Charger", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("ChargerStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ConstellationId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConstellationId");

                    b.ToTable("Chargers");
                });

            modelBuilder.Entity("EVCharger.Base.Models.Models.Constellation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Constellations");
                });

            modelBuilder.Entity("EVCharger.Base.Models.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConstellationUser", b =>
                {
                    b.HasOne("EVCharger.Base.Models.Models.Constellation", null)
                        .WithMany()
                        .HasForeignKey("ConstellationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVCharger.Base.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EVCharger.Base.Models.Models.Charger", b =>
                {
                    b.HasOne("EVCharger.Base.Models.Models.Constellation", "Constellation")
                        .WithMany()
                        .HasForeignKey("ConstellationId");

                    b.Navigation("Constellation");
                });
#pragma warning restore 612, 618
        }
    }
}
